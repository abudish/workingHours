qplot(Petal.Width, Sepal.Width, colour=equalPredictions, data=testing)
table(plda, pnb)
?USArrests
require(graphics)
pairs(USArrests, panel = panel.smooth, main = "USArrests data")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
rm(list=ls())
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
?segmentationOriginal
training <- segmentationOriginal[inTrain, ]
inTrain <- createDataPartition(segmentationOriginal$Case,
p = 0.7, list = FALSE)
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
dim(training); dim (testing)
set.seed(125)
modFit <- train(Case ~ ., method="rpart", data=training)
print(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel, palettes="YlGnBu")
?predict
rm(list=ls())
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(segmentationOriginal$Case,
p = 0.7, list = FALSE)
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
set.seed(125)
modFit <- train(Class ~ ., method="rpart", data=training)
print(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel, palettes="YlGnBu")
rm(list=ls())
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(segmentationOriginal$Case,
p = 0.6, list = FALSE)
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
set.seed(125)
modFit <- train(Class ~ ., method="rpart", data=training)
print(modFit$finalModel)
library(rattle)
fancyRpartPlot(modFit$finalModel, palettes="YlGnBu")
rm(list=ls())
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain <- createDataPartition(segmentationOriginal$Case,
p = 0.5, list = FALSE)
training <- segmentationOriginal[inTrain, ]
testing <- segmentationOriginal[-inTrain, ]
set.seed(125)
modFit <- train(Class ~ ., method="rpart", data=training)
print(modFit$finalModel)
fancyRpartPlot(modFit$finalModel, palettes="YlGnBu")
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
View(olive)
str(olive)
olive = olive[,-1]
?tree
modFit <- train(Area ~ ., method="rpart", data=olive)
newdata <-  as.data.frame(t(colMeans(olive)))
?t
View(newdata)
colMeans(olive)
t(colMeans(olive))
predict(modFit, newdata)
str(olive)
library(ElemStatLearn)
data(SAheart)
View(SAheart)
str(SAheart)
?sample
dim(SAheart)
dim(SAheart)[1]
462/2
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
names(SAheart)
?SAheart
modelGlmBinom <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data=trainSA,
method="glm",
family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(SAheart$chd, predict(modelGlmBinom, newdata = trainSA))
missClass(SAheart$chd, predict(modelGlmBinom, newdata = testSA))
rm(list = ls())
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modelGlmBinom <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data=trainSA,
method="glm",
family="binomial")
# Calculate the misclassification rate for your model using this function
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(SAheart$chd, predict(modelGlmBinom, newdata = trainSA))
missClass(SAheart$chd, predict(modelGlmBinom, newdata = testSA))
modelGlmBinom <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data=trainSA,
method="glm")
missClass(SAheart$chd, predict(modelGlmBinom, newdata = trainSA))
missClass(SAheart$chd, predict(modelGlmBinom, newdata = testSA))
modelGlmBinom <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data=trainSA,
method="glm",
family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(SAheart$chd, predict(modelGlmBinom, newdata = trainSA))
missClass(SAheart$chd, predict(modelGlmBinom, newdata = testSA))
set.seed(13234)
modelGlmBinom <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data=trainSA,
method="glm",
family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(SAheart$chd, predict(modelGlmBinom, newdata = trainSA))
missClass(SAheart$chd, predict(modelGlmBinom, newdata = testSA))
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
modelGlmBinom <- train(chd ~ age + alcohol + obesity + tobacco + typea + ldl,
data=trainSA,
method="glm",
family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(SAheart$chd, predict(modelGlmBinom, newdata = trainSA))
missClass(SAheart$chd, predict(modelGlmBinom, newdata = testSA))
missClass(trainSA$chd, predict(modelGlmBinom, newdata = trainSA))
missClass(trainSA$chd, predict(modelGlmBinom, newdata = testSA))
missClass(testSA$chd, predict(modelGlmBinom, newdata = testSA))
missClass(trainSA$chd, predict(modelGlmBinom, newdata = trainSA))
missClass(testSA$chd, predict(modelGlmBinom, newdata = testSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
View(vowel.test)
?vowel.test
?varImp
str(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
str(vowel.test)
str(vowel.train)
set.seed(33833)
modRandForest <- train(y ~ ., method="rf", data=vowel.train)
varImp(modRandForest)
?randomForest
rm(list=ls())
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
modRandForest <- randomForest(y ~ ., data=vowel.train)
varImp(modRandForest)
?order
order(varImp(modRandForest), decreasing = TRUE)
?sort
sort(varImp(modRandForest), decreasing = TRUE)
sort(varImp(modRandForest), decreasing = TRUE)
class(varImp(modRandForest))
varImp(modRandForest)
sort(varImp(modRandForest))
df <- varImp(modRandForest)
df[order(df, decreasing = FALSE)]
[order(df, decreasing = FALSE)
order(df, decreasing = FALSE)
df[order(df, decreasing = FALSE),]
df[order(df),]
View(varImp(modRandForest))
df[order(df$Overall),]
df <- df[order(df$Overall, decreasing = FALSE),]
View(df)
varImp(modRandForest)
as.vector(varImp(modRandForest))
v <- as.vector(varImp(modRandForest))
View(v)
v$Overall
sort(v)
sort(v$Overall)
z <- sort(v$Overall)
z
df
rm(df)
rm(z)
df <- varImp(modRandForest)
df[order(df$Overall),]
View(df)
View(df[order(df$Overall),])
View(df[order(df),])
row.names(df[order(df),])
row.names(df)
df[order(df, decreasing = FALSE),]
df
rownames(df)
rownames(df[order(df, decreasing = FALSE),])
rownames(df[order(df$Overall, decreasing = FALSE),])
z <- df[order(df$Overall), ]
z
order(df, decreasing = TRUE)
z <- df[order(df$Overall, decreasing = TRUE), ]
z
z
df
df$namex <- rownames(df)
df
z <- df[order(df$Overall, decreasing = TRUE), ]
z
df <- varImp(modRandForest)
df
df$variables <- rownames(df)
df
df[order(df$Overall, decreasing = TRUE), ]
order(varImp(modRandForest), decreasing = TRUE)
install.packages("readxl")
library(readxl)
?readxl
data <- read_xlsx("Working hours per week (1985 - 2007).xlsx")
View(data)
library(ggplot2)
df <- read_xlsx("Working hours per week (1985 - 2007).xlsx")
?df
str(df)
View(df)
colnames(df)
colnames(df)[-1]
df[1,]
plot(df[1, -1])
df[1]
df[-1, 1]
df[, 1]
df[1,]
df[1, -1]
plot(df[1, -1])
v <- as.vector(df[1, -1])
v
plot(v)
d <- as.data.frame(df)
head(d)
d[1, -1]
plot(d[1, -1])
str(d)
head(animals)
data(animals)
library(MASS)
?Animals
head(Animals)
str(Animals)
rownames(Animals)
plot(Animals$body, Animals$brain)
data()
head(road)
?road
nlschools
?nlschools
head(nlschools)
plot(lang ~ IQ, data=nlschools)
head(economics)
?economics
head(women)
?occupationalStatus
head(occupationalStatus)
head(austres)
head(BJsales)
?economics_long
library(reshape2)
?melt
molten <- melt(df, id="Working hours per week")
head(molten)
colnames(df)
class(molten)
str(molten)
colnames(molten)
colnames(molten) <- c("country", "year", "hours/week")
colnames(molten)
colnames(molten) <- c("country", "year", "hours_per_week")
colnames(molten)
head(molten)
ggplot(data=molten, aes(x=year, y=hours_per_week, group=country, colour=country)) + geom_line()
ggplot(data=subset(molten, country=="Australia"), aes(x=year, y=hours_per_week)) + geom_line()
head(subset(molten, country=="Australia"))
aust <- subset(molten, country=="Australia"))
aust <- subset(molten, country=="Australia")
ggplot(aust, aes(x=year, y=hours_per_week) + geom_line())
str(aust)
str(molten)
aust$year <- as.numeric(aust$year)
str(aust)
ggplot(aust, aes(x=year, y=hours_per_week) + geom_line())
ggplot(aust, aes(x=year, y=hours_per_week) + geom_line()
ggplot(aust, aes(x=year, y=hours_per_week)) + geom_line()
aust$year <- as.factor(aust$year)
ggplot(aust, aes(x=year, y=hours_per_week)) + geom_line()
aust$year
aust <- subset(molten, country=="Australia")
head(aust)
ggplot(aust, aes(x=year, y=hours_per_week)) + geom_line()
ggplot(aust, aes(x=year, y=hours_per_week, group=1)) + geom_line()
df <- read_xlsx("Working hours per week (1985 - 2007).xlsx")
head(df)
View(df)
df <- melt(df, id="Working hours per week")
head(df)
colnames(df) <- (c("country", "year", "hours_per_week")
colnames(df) <- c("country", "year", "hours_per_week")
colnames(df)
colnames(df) <- c("country", "year", "hours_per_week")
colnames(df)
head(df)
dim(df)
range(df$year)
ggplot(data=subset(df, country=="Australia"), aes(x=year, y=hours_per_week, group=1)) + geom_line()
ggplot(data=molten, aes(x=year, y=hours_per_week, group=country, colour=country)) + geom_line()
c <- "Australia"
ggplot(data=subset(df, country==c), aes(x=year, y=hours_per_week, group=1)) + geom_line()
ggplot(data=subset(df, country==c), aes(x=year, y=hours_per_week, group=1)) +
geom_line() +
geom_point( size=4, shape=21, fill="white")
ggplot(data=molten, aes(x=year, y=hours_per_week, group=country, colour=country)) +
geom_line() +
geom_point( size=4, shape=21, fill="white")
ggplot(data=molten, aes(x=year, y=hours_per_week, group=country, colour=country)) +
geom_line() +
geom_point( size=2, shape=21, fill="white")
ggplot(data=molten, aes(x=year, y=hours_per_week, group=country, colour=country)) +
geom_line() +
geom_point( size=1, shape=21, fill="white")
library(shiny)
runApp("buildUI")
runApp("census-app")
runApp("cesusVis")
runApp("censusVis")
runApp("controlWidgets")
runApp("quiz")
runApp("tabs")
runApp("workinghours")
system.file("examples", package="shiny")
runExample("11_timer")
runExample("10_download")
runExample("09_upload")
runExample("08_html")
runExample("06_tabsets")
runExample("05_sliders")
runExample("04_mpg")
library(shiny)
runApp("workinghours")
runApp("workinghours")
str(df)
unique(df$country)
countries <- unique(df$country)
countries
paste(countries)
paste(countries, collapse = '')
paste(countries, collapse = ' ')
paste(countries, collapse = '"" ')
paste(countries, collapse = '" ')
runApp("workinghours")
runApp("workinghours")
runApp("workinghours")
runApp("workinghours")
runApp("workinghours")
runApp("workinghours")
runApp("workinghours")
runApp("workinghours")
runApp("workinghours")
runApp("workinghours")
runApp("workinghours")
runApp("workinghours")
runApp("workinghours")
runApp("workinghours")
runApp("workinghours")
runApp("workinghours")
runApp("workinghours")
runApp('workinghours')
runApp('workinghours')
?melt
?read_xlsx
runApp('workinghours')
runApp('workinghours')
c <- "Australia"
ggplot(data=subset(df, country==c), aes(x=year, y=hours_per_week, group=1)) +
geom_line() +
geom_point( size=4, shape=21, fill="white")
runApp('workinghours')
range(df$hours_per_week)
range(df$hours_per_week, na.rm = TRUE)
runApp('workinghours')
# Drawing timeseries for all countries
ggplot(data=molten, aes(x=year, y=hours_per_week, group=country, colour=country)) +
geom_line() +
geom_point( size=1, shape=21, fill="white")
runApp('workinghours')
runApp('workinghours')
install.packages("ggthemes")
runApp('workinghours')
runApp('workinghours')
ggplot(data=molten, aes(x=year, y=hours_per_week, group=country, colour=country)) +
geom_line() +
geom_point( size=1, shape=21, fill="white") +
theme_hc() +
scale_colour_hc()
ggplot(data=molten, aes(x=year, y=hours_per_week, group=country, colour=country)) +
geom_line() +
geom_point( size=1, shape=21, fill="white") +
scale_colour_economist() +
scale_y_continuous(position = "right")
ggplot(data=molten, aes(x=year, y=hours_per_week, group=country, colour=country)) +
geom_line() +
geom_point( size=1, shape=21, fill="white") +
theme_wsj() +
scale_colour_hc()
ggplot(data=molten, aes(x=year, y=hours_per_week, group=country, colour=country)) +
geom_line() +
geom_point( size=1, shape=21, fill="white") +
theme_wsj()
ggplot(data=molten, aes(x=year, y=hours_per_week, group=country, colour=country)) +
geom_line() +
geom_point( size=1, shape=21, fill="white") +
theme_hc()
ggplot(data=molten, aes(x=year, y=hours_per_week, group=country, colour=country)) +
geom_line() +
geom_point( size=1, shape=21, fill="white") +
theme_pander()
runApp('workinghours')
df[df$year==1985:2007,]
subset(df, country == "Australia" && year ==1985:1987)
df$year in 1985
df[df$year==1985:2007 && df$country=="Australia",]
subset(df, year == c(1985:1986))
?subset
subset(df, year >= 1985 & year <= 2000 & country="Australia")
subset(df, year >= 1985 & year <= 2000 & country=="Australia")
str(1985)
?%between%
?'%between%'
df$year <- as.numeric(df$year)
str(df)
subset(df, year >= 1985 & year <= 2000 & country=="Australia")
subset(df, year >= 1985 & year <= 2000 && country=="Australia")
subset(df, year >= 1985 && year <= 2000 && country=="Australia")
subset(df, year >= 1985 && year <= 2000)
str(df)
unique(df$year)
subset(df, year >= 3 && year <= 5 && country=="Australia")
subset(df, year >= 3 && year <= 5)
colnames(df) <- c("country", "year", "hours_per_week")
df <- read_xlsx("Working hours per week (1985 - 2007).xlsx")
df <- melt(df, id="Working hours per week")
colnames(df) <- c("country", "year", "hours_per_week")
str(df)
head(df)
subset(df, (year %in% c("1985", "1986")) & country=="Australia")
1985:2007
class(1985:2007)
year_range <- 1985:2000
year_range
ggplot(data=subset(df, country==c &&(year %in% year_range)), aes(x=year, y=hours_per_week, group=1)) +
geom_line() +
geom_point( size=4, shape=21, fill="white") +
labs(title="Working hours per week")
c <- "Australia"
ggplot(data=subset(df, country==c &&(year %in% year_range)), aes(x=year, y=hours_per_week, group=1)) +
geom_line() +
geom_point( size=4, shape=21, fill="white") +
labs(title="Working hours per week")
as.factor(year_range)
ggplot(data=subset(df, country==c &&(year %in% as.factor(year_range))), aes(x=year, y=hours_per_week, group=1)) +
geom_line() +
geom_point( size=4, shape=21, fill="white") +
labs(title="Working hours per week")
ggplot(data=subset(df, country==c), aes(x=year, y=hours_per_week, group=1)) +
geom_line() +
geom_point( size=4, shape=21, fill="white") +
labs(title="Working hours per week")
subset(df, (year %in% year_range) & country=="Australia")
ggplot(data=subset(df, (year %in% year_range) & country=="Australia"), aes(x=year, y=hours_per_week, group=1)) +
geom_line() +
geom_point( size=4, shape=21, fill="white") +
labs(title="Working hours per week")
str(year_range)
str(df)
runApp('workinghours')
?runApp
runApp("workinghours", display.mode = "showcase")
View(df)
runApp('workinghours')
